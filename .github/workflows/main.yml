name: foodgram workflow

on: [push]

jobs:
  tests:
    name: Check PEP8
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.9

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt
    - name: Test with flake8
      run: |
        python -m flake8
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: annasimanova/foodgram_backend:latest
      - name: Push frontend
        uses: docker/build-push-action@v2 
        with:
          context: frontend/
          push: true
          tags: annasimanova/foodgram_frontend:latest
  deploy:
    name: Push to Cloud
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }} 
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
          cd foodgram-project-react/infra
          sudo docker-compose down -v
          sudo systemctl stop nginx
          sudo docker-compose rm backend
          sudo rm .env
          sudo touch .env
          sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker-compose -f docker-compose.yml up -d
  send_message:
    name: Report to Telegram
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} succeed!
